# Service template - Copy this file to create new services
# Replace example-service, 3000, and /api/example with actual values

upstream example-service {
    server example-service:3000;
}

server {
    listen 80;
    server_name example.com;
    
    # Allow Let's Encrypt certificate validation
    location /.well-known/acme-challenge/ {
        root /var/www;
        default_type text/plain;
    }
    
    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name example.com;
    
    # SSL certificate locations
    ssl_certificate /etc/nginx/ssl/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/example.com/privkey.pem;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    
    # Rate limiting
    limit_req zone=api burst=20 nodelay;
    limit_req_status 429;
    
    # Service proxy
    location //api/example/ {
        proxy_pass http://example-service/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS headers
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
    }
    
    # Error pages
    error_page 429 /rate-limit.html;
    location = /rate-limit.html {
        root /var/www;
        internal;
    }
}
